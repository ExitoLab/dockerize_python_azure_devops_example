trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'connectedServiceNameARM'  # Azure subscription connected to Azure DevOps
  resourceGroup: 'python-app'  # Azure resource group for ACI and ACR
  acrName: 'sampleapp'  # Azure Container Registry name
  acrServiceConnection: 'sampleapp'  # Azure service connection for ACR
  containerName: 'python-app-container'  # Azure Container Instance name
  imageName: 'python-app'  # Docker image name
  containerRegistry: 'sampleapp.azurecr.io'  # ACR registry URI (including the region, e.g., azurecr.io)
  imageTag: '$(Build.BuildId)'  # Unique tag based on Build ID (e.g., 1234, 1235, etc.)

jobs:
- job: BuildAndDeploy
  displayName: 'Build Docker Image, Push to ACR, and Deploy to ACI'
  pool:
    vmImage: 'ubuntu-latest'  # Use Ubuntu for the build environment

  steps:
    # Step 1: Check and Create Resource Group if Needed
    - task: AzureCLI@2
      displayName: 'Check and Create Resource Group'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if Resource Group $(resourceGroup) exists..."
          rg_exists=$(az group show --name $(resourceGroup) --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$rg_exists" ]; then
            echo "Resource Group $(resourceGroup) does not exist. Creating it..."
            az group create --name $(resourceGroup) --location eastus
          else
            echo "Resource Group $(resourceGroup) already exists. Skipping creation."
          fi

    # Step 2: Check and Create ACR if Needed
    - task: AzureCLI@2
      displayName: 'Check and Create Azure Container Registry (ACR)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if ACR $(acrName) exists..."
          acr_exists=$(az acr show --name $(acrName) --resource-group $(resourceGroup) --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$acr_exists" ]; then
            echo "ACR $(acrName) does not exist. Creating it..."
            az acr create \
              --name $(acrName) \
              --resource-group $(resourceGroup) \
              --sku Basic \
              --admin-enabled true
          else
            echo "ACR $(acrName) already exists. Skipping creation."
          fi
        continueOnError: true  # Ensure the pipeline doesn't fail if ACR creation fails (due to existing ACR)

    # Step 3: Login to ACR
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: $(acrServiceConnection)

    # Step 4: Build Docker Image
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        containerRegistry: $(acrName)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        imageName: $(imageName)
        tags: '$(imageTag)'  # Use unique tag based on Build ID for versioning

    # Step 5: Push Docker Image to ACR
    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        containerRegistry: $(acrName)
        imageName: $(imageName)
        tags: '$(imageTag)'  # Push image with unique tag

    # Step 6: Deploy to Azure Container Instances
    - task: AzureCLI@2
      displayName: 'Deploy to Azure Container Instances'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Logging in to ACR to get credentials..."
          az acr update --name $(acrName) --admin-enabled true
          acrCreds=$(az acr credential show --name $(acrName) --resource-group $(resourceGroup))
          acrUsername=$(echo $acrCreds | jq -r '.username')
          acrPassword=$(echo $acrCreds | jq -r '.passwords[0].value')

          echo "Deploying to Azure Container Instances..."
          az container create \
            --name $(containerName) \
            --resource-group $(resourceGroup) \
            --image $(containerRegistry)/$(imageName):$(imageTag) \
            --cpu 1 \
            --memory 1.5 \
            --ports 5000 \
            --dns-name-label python-app-demo \
            --registry-login-server $(containerRegistry) \
            --registry-username "$acrUsername" \
            --registry-password "$acrPassword" \
            --os-type Linux

