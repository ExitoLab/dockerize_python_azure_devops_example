trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'b0db9144-b4ed-4024-98bf-e8938e730316' # Add your azureSubscription
  resourceGroup: 'python-app' # Add your resourceGroup
  acrName: 'python-app'
  containerName: 'python-app-container'
  imageName: 'python-app'
  containerRegistry: 'python-app'

jobs:
- job: BuildAndDeploy
  displayName: 'Check ACR, Build Docker Image, and Deploy to ACI'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
    # Step 1: Check if ACR Exists and Create if Needed
    - task: AzureCLI@2
      displayName: 'Check and Create Azure Container Registry (ACR)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          acr_exists=$(az acr show --name $(acrName) --resource-group $(resourceGroup) --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$acr_exists" ]; then
            echo "ACR $(acrName) does not exist. Creating it..."
            az acr create \
              --name $(acrName) \
              --resource-group $(resourceGroup) \
              --sku Basic \
              --admin-enabled true
          else
            echo "ACR $(acrName) already exists. Skipping creation."
          fi

    # Step 2: Login to ACR
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: $(acrName)

    # Step 3: Build Docker Image
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        containerRegistry: $(acrName)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        imageName: $(imageName)
        tags: 'latest'

    # Step 4: Push Docker Image to ACR
    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        containerRegistry: $(acrName)
        imageName: $(imageName)
        tags: 'latest'

    # Step 5: Deploy to Azure Container Instances
    - task: AzureCLI@2
      displayName: 'Deploy to Azure Container Instances'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az container create \
            --name $(containerName) \
            --resource-group $(resourceGroup) \
            --image $(containerRegistry)/$(imageName):latest \
            --cpu 1 --memory 1.5 \
            --ports 5000
