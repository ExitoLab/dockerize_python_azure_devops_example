trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'connectedServiceNameARM'  # Azure subscription connected to Azure DevOps
  resourceGroup: 'python-app'  # Azure resource group for ACI and ACR
  acrName: 'sampleapp'  # Azure Container Registry name
  acrServiceConnection: 'sampleapp'  # Azure service connection for ACR
  containerName: 'python-app-container'  # Azure Container Instance name
  imageName: 'python-app'  # Docker image name
  containerRegistry: 'sampleapp.azurecr.io'  # ACR registry URI (including the region, e.g., azurecr.io)
  imageTag: '$(Build.BuildId)'  # Unique tag based on Build ID (e.g., 1234, 1235, etc.)

jobs:
- job: BuildAndDeploy
  displayName: 'Build Docker Image, Push to ACR, and Deploy to ACI'
  pool:
    vmImage: 'ubuntu-latest'  # Use Ubuntu for the build environment

  steps:
    # Step 1: Check and Create Resource Group if Needed
    - task: AzureCLI@2
      displayName: 'Check and Create Resource Group'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if Resource Group $(resourceGroup) exists..."
          rg_exists=$(az group show --name $(resourceGroup) --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$rg_exists" ]; then
            echo "Resource Group $(resourceGroup) does not exist. Creating it..."
            az group create --name $(resourceGroup) --location eastus
          else
            echo "Resource Group $(resourceGroup) already exists. Skipping creation."
          fi

    # Step 2: Check and Create ACR if Needed
    - task: AzureCLI@2
      displayName: 'Check and Create Azure Container Registry (ACR)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if ACR $(acrName) exists..."
          acr_exists=$(az acr show --name $(acrName) --resource-group $(resourceGroup) --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$acr_exists" ]; then
            echo "Creating ACR $(acrName)..."
            az acr create \
              --name $(acrName) \
              --resource-group $(resourceGroup) \
              --sku Basic \
              --admin-enabled true
            echo "Waiting for ACR to be ready..."
            sleep 30  # Give ACR some time to finish provisioning
          else
            echo "ACR $(acrName) already exists."
          fi
          
          # Get ACR credentials and store them as pipeline variables
          echo "Getting ACR credentials..."
          ACR_USERNAME=$(az acr credential show --name $(acrName) --resource-group $(resourceGroup) --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $(acrName) --resource-group $(resourceGroup) --query "passwords[0].value" -o tsv)
          ACR_LOGIN_SERVER=$(az acr show --name $(acrName) --resource-group $(resourceGroup) --query "loginServer" -o tsv)
          
          echo "##vso[task.setvariable variable=acrUsername]$ACR_USERNAME"
          echo "##vso[task.setvariable variable=acrPassword]$ACR_PASSWORD"
          echo "##vso[task.setvariable variable=acrLoginServer]$ACR_LOGIN_SERVER"

    # Step 3: Login to Docker using ACR admin credentials
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: '$(acrLoginServer)'
        username: '$(acrUsername)'
        password: '$(acrPassword)'

    # Step 4: Build Docker Image
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: '$(acrLoginServer)/python-app'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: '$(imageTag)'
        buildContext: '$(Build.SourcesDirectory)'

    # Step 5: Push Docker Image to ACR
    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        repository: '$(acrLoginServer)/python-app'
        tags: '$(imageTag)'
      
    # Step 6: Verify image was pushed successfully
    - task: AzureCLI@2
      displayName: 'Verify Image in ACR'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Verifying image was pushed to ACR..."
          az acr repository show --name $(acrName) --repository python-app

    # Step 7: Deploy to Azure Container Instances
    - task: AzureCLI@2
      displayName: 'Deploy to Azure Container Instances'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Enable admin access if not already enabled
          echo "Enabling admin access on ACR..."
          az acr update --name $(acrName) --admin-enabled true
          
          # Get ACR credentials more reliably
          echo "Getting ACR credentials..."
          acrUsername=$(az acr credential show --name $(acrName) --query username -o tsv)
          acrPassword=$(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)
          
          echo "Using registry: $(containerRegistry)"
          echo "Using image: $(containerRegistry)/$(imageName):$(imageTag)"
          
          # Verify the image exists in ACR
          echo "Verifying image exists in ACR..."
          az acr repository show --name $(acrName) --image $(imageName):$(imageTag) || echo "WARNING: Image may not exist in registry"
          
          echo "Deploying to Azure Container Instances..."
          az container create \
            --name $(containerName) \
            --resource-group $(resourceGroup) \
            --image $(containerRegistry)/$(imageName):$(imageTag) \
            --cpu 1 \
            --memory 1.5 \
            --ports 5000 \
            --dns-name-label python-app-demo \
            --registry-login-server $(containerRegistry) \
            --registry-username "$acrUsername" \
            --registry-password "$acrPassword" \
            --os-type Linux
          
          # Verify deployment status
          echo "Checking container status..."
          az container show --name $(containerName) --resource-group $(resourceGroup) --query instanceView.state
